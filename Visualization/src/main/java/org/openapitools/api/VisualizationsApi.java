/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Visualizacion;
import org.openapitools.model.VisualizationsUserIDDelete200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-11T16:32:34.104885200+01:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Visualization", description = "Este endpoint maneja las diferentes operaciones sobre las visualizaciones")
public interface VisualizationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /visualizations/{userID} : Borrar historial de visualizaciones
     * Elimina todo el historial de visualizaciones del usuario autenticado o una visualizaci贸n
     *
     * @param userID  (required)
     * @return Historial eliminado exitosamente (status code 200)
     *         or Error en la solicitud, por ejemplo, el contenido no existe en el historial (status code 400)
     *         or Usuario no autenticado (status code 401)
     *         or Contenido o historial no encontrado (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "visualizationsUserIDDelete",
        summary = "Borrar historial de visualizaciones",
        description = "Elimina todo el historial de visualizaciones del usuario autenticado o una visualizaci贸n",
        tags = { "Visualization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Historial eliminado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VisualizationsUserIDDelete200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error en la solicitud, por ejemplo, el contenido no existe en el historial"),
            @ApiResponse(responseCode = "401", description = "Usuario no autenticado"),
            @ApiResponse(responseCode = "404", description = "Contenido o historial no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error en el servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/visualizations/{userID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VisualizationsUserIDDelete200Response> visualizationsUserIDDelete(
        @Parameter(name = "userID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Historial de visualizaciones eliminado exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /visualizations/{userID} : Obtener visualizaciones de un usuario (historial de visualizaci贸n)
     * Retorna la lista de contenido visualizado por el usuario autenticado.
     *
     * @param userID ID del usuario. (required)
     * @return Lista de visualizaciones recuperada exitosamente (status code 200)
     *         or Usuario no autenticado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "visualizationsUserIDGet",
        summary = "Obtener visualizaciones de un usuario (historial de visualizaci贸n)",
        description = "Retorna la lista de contenido visualizado por el usuario autenticado.",
        tags = { "Visualization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de visualizaciones recuperada exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Visualizacion.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Usuario no autenticado"),
            @ApiResponse(responseCode = "500", description = "Error en el servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/visualizations/{userID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Visualizacion>> visualizationsUserIDGet(
        @Parameter(name = "userID", description = "ID del usuario.", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"filmID\" : 1, \"visualizationID\" : 1, \"serieID\" : 1, \"userID\" : 1, \"visualizationDate\" : \"2023-10-09T12:00:00Z\", \"progreso\" : \"Viendo\" }, { \"filmID\" : 1, \"visualizationID\" : 1, \"serieID\" : 1, \"userID\" : 1, \"visualizationDate\" : \"2023-10-09T12:00:00Z\", \"progreso\" : \"Viendo\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
