/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CancelSuscripcionPlan200Response;
import org.openapitools.model.DeleteList200Response;
import org.openapitools.model.DeletePaymentMethod200Response;
import org.openapitools.model.DeleteProfile200Response;
import org.openapitools.model.DeleteUser200Response;
import org.openapitools.model.FilmList;
import org.openapitools.model.LogoutUser200Response;
import org.openapitools.model.ModelList;
import org.openapitools.model.PaymentMethod;
import org.openapitools.model.Profile;
import org.openapitools.model.SeriesList;
import org.openapitools.model.SuscripcionPlan;
import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-12T19:10:30.312062600+01:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "user", description = "Las operaciones relacionadas con el usuario son creación, actualización, eliminación, y autenticación.")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user/{userID}/list : Crea una nueva lista
     * Añade una nueva lista a la plataforma
     *
     * @param userID ID del usuario que quiere añadir la lista (required)
     * @param modelList Datos de la nueva lista a crear (required)
     * @return Lista creada con éxito (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Conflicto (la lista ya existe) (status code 409)
     */
    @Operation(
        operationId = "addList",
        summary = "Crea una nueva lista",
        description = "Añade una nueva lista a la plataforma",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Lista creada con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "409", description = "Conflicto (la lista ya existe)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ModelList> addList(
        @Parameter(name = "userID", description = "ID del usuario que quiere añadir la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "ModelList", description = "Datos de la nueva lista a crear", required = true) @Valid @RequestBody ModelList modelList
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listID\" : 101, \"films\" : [ 1, 1 ], \"createdAt\" : \"2023-10-09T10:00:00Z\", \"series\" : [ 1, 1 ], \"name\" : \"Mis Series Favoritas\", \"userID\" : 101 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{userID}/payment : Añade un método de pago
     * Permite al usuario añadir un nuevo método de pago
     *
     * @param userID ID del usuario al que se le añadirá el método de pago (required)
     * @param paymentMethod Datos del método de pago a añadir (required)
     * @return Método de pago obtenido con éxito (status code 200)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     */
    @Operation(
        operationId = "addPaymentMethod",
        summary = "Añade un método de pago",
        description = "Permite al usuario añadir un nuevo método de pago",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Método de pago obtenido con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentMethod.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/payment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PaymentMethod> addPaymentMethod(
        @Parameter(name = "userID", description = "ID del usuario al que se le añadirá el método de pago", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "PaymentMethod", description = "Datos del método de pago a añadir", required = true) @Valid @RequestBody PaymentMethod paymentMethod
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cardHolderName\" : \"Juan Pérez\", \"paymentID\" : 12345, \"userID\" : 12345, \"cardNumber\" : 4111111111111111, \"expirationDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{userID}/profiles : Añade un nuevo perfil
     * Permite al usuario añadir un nuevo perfil a su cuenta.
     *
     * @param userID ID del usuario al que se le añadirá el perfil (required)
     * @param profile Datos del perfil a añadir (required)
     * @return Perfil añadido con éxito (status code 200)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     */
    @Operation(
        operationId = "addProfile",
        summary = "Añade un nuevo perfil",
        description = "Permite al usuario añadir un nuevo perfil a su cuenta.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfil añadido con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Profile.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/profiles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Profile> addProfile(
        @Parameter(name = "userID", description = "ID del usuario al que se le añadirá el perfil", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "Profile", description = "Datos del perfil a añadir", required = true) @Valid @RequestBody Profile profile
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"avatarURL\" : \"https://example.com/avatars/avatar1.png\", \"profileID\" : 2, \"name\" : \"Perfil Principal\", \"type\" : \"adult\", \"userID\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID}/cancelSuscripcionPlan : Dar de baja un Plan de Suscripción
     * Cancela el plan de suscripción activo del usuario.
     *
     * @param userID ID del usuario que desea cancelar el plan (required)
     * @return Plan de suscripción cancelado con éxito (status code 200)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or No se encontró el plan de suscripción para este usuario (status code 404)
     *         or Error interno del servidor al procesar la solicitud (status code 500)
     */
    @Operation(
        operationId = "cancelSuscripcionPlan",
        summary = "Dar de baja un Plan de Suscripción",
        description = "Cancela el plan de suscripción activo del usuario.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Plan de suscripción cancelado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CancelSuscripcionPlan200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "No se encontró el plan de suscripción para este usuario"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor al procesar la solicitud")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}/cancelSuscripcionPlan",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CancelSuscripcionPlan200Response> cancelSuscripcionPlan(
        @Parameter(name = "userID", description = "ID del usuario que desea cancelar el plan", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"El plan de suscripción ha sido cancelado exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user : Crea un nuevo usuario
     * Añade un nuevo usuario a la plataforma.
     *
     * @param user Datos del nuevo usuario a crear (required)
     * @return Usuario creado con éxito (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Conflicto (el usuario ya existe) (status code 409)
     */
    @Operation(
        operationId = "createUser",
        summary = "Crea un nuevo usuario",
        description = "Añade un nuevo usuario a la plataforma.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Usuario creado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "409", description = "Conflicto (el usuario ya existe)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> createUser(
        @Parameter(name = "User", description = "Datos del nuevo usuario a crear", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"password\" : \"1e34r\", \"preferences\" : [ 1, 3, 4 ], \"name\" : \"Juan Pérez\", \"userID\" : 1, \"email\" : \"juan.perez@example.com\", \"username\" : \"juanperez\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID}/list/{listID} : Elimina una lista existente
     * Borra una lista de la plataforma
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a eliminar (required)
     * @return Lista eliminada exitosamente (status code 200)
     *         or Solicitud inválida (ID de lista no proporcionado o incorrecto) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (la lista no se puede eliminar) (status code 409)
     */
    @Operation(
        operationId = "deleteList",
        summary = "Elimina una lista existente",
        description = "Borra una lista de la plataforma",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista eliminada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (ID de lista no proporcionado o incorrecto)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (la lista no se puede eliminar)")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}/list/{listID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteList200Response> deleteList(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a eliminar", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Lista eliminada exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID}/payment : Elimina un método de pago
     * Permite al usuario eliminar un método de pago existente
     *
     * @param userID ID del usuario del que se desea eliminar el método de pago (required)
     * @return Metodo de pago eliminado exitosamente (status code 200)
     *         or ID de usuario o método de pago inválido proporcionado (status code 400)
     *         or Método de pago no encontrado (status code 404)
     */
    @Operation(
        operationId = "deletePaymentMethod",
        summary = "Elimina un método de pago",
        description = "Permite al usuario eliminar un método de pago existente",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Metodo de pago eliminado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeletePaymentMethod200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID de usuario o método de pago inválido proporcionado"),
            @ApiResponse(responseCode = "404", description = "Método de pago no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}/payment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeletePaymentMethod200Response> deletePaymentMethod(
        @Parameter(name = "userID", description = "ID del usuario del que se desea eliminar el método de pago", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Metodo de pago eliminado exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID}/profiles/{profileID} : Elimina un perfil existente
     * Permite al usuario eliminar un perfil existente utilizando el ID del usuario y el ID del perfil.
     *
     * @param userID ID del usuario del cual se eliminará el perfil (required)
     * @param profileID ID del perfil que se desea eliminar (required)
     * @return Perfil eliminado exitosamente (status code 200)
     *         or ID de usuario o perfil inválido proporcionado (status code 400)
     *         or Perfil no encontrado (status code 404)
     */
    @Operation(
        operationId = "deleteProfile",
        summary = "Elimina un perfil existente",
        description = "Permite al usuario eliminar un perfil existente utilizando el ID del usuario y el ID del perfil.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfil eliminado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteProfile200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID de usuario o perfil inválido proporcionado"),
            @ApiResponse(responseCode = "404", description = "Perfil no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}/profiles/{profileID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteProfile200Response> deleteProfile(
        @Parameter(name = "userID", description = "ID del usuario del cual se eliminará el perfil", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "profileID", description = "ID del perfil que se desea eliminar", required = true, in = ParameterIn.PATH) @PathVariable("profileID") Integer profileID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Perifl eliminado exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID} : Elimina un usuario existente
     * Elimina un usuario de la plataforma usando su ID.
     *
     * @param userID ID del usuario que se desea eliminar (required)
     * @return Usuario eliminado exitosamente (status code 200)
     *         or ID de usuario inválido proporcionado (status code 400)
     *         or Usuario no encontrado (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Elimina un usuario existente",
        description = "Elimina un usuario de la plataforma usando su ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuario eliminado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteUser200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID de usuario inválido proporcionado"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteUser200Response> deleteUser(
        @Parameter(name = "userID", description = "ID del usuario que se desea eliminar", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Usuario eliminado exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{userID}/list/{listID} : Edita una lista existente
     * Modifica los datos de una lista ya creada en la plataforma
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a modificar (required)
     * @param modelList Datos de la lista a modificar (required)
     * @return Lista editada con éxito (status code 200)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (la lista no se puede editar) (status code 409)
     */
    @Operation(
        operationId = "editList",
        summary = "Edita una lista existente",
        description = "Modifica los datos de una lista ya creada en la plataforma",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista editada con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (la lista no se puede editar)")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{userID}/list/{listID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ModelList> editList(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a modificar", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID,
        @Parameter(name = "ModelList", description = "Datos de la lista a modificar", required = true) @Valid @RequestBody ModelList modelList
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listID\" : 101, \"films\" : [ 1, 1 ], \"createdAt\" : \"2023-10-09T10:00:00Z\", \"series\" : [ 1, 1 ], \"name\" : \"Mis Series Favoritas\", \"userID\" : 101 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{userID}/profiles/{profileID} : Edita un perfil existente
     * Permite al usuario editar un perfil existente utilizando el ID del usuario y el ID del perfil.
     *
     * @param userID ID del usuario del cual se desea editar el perfil (required)
     * @param profileID ID del perfil que se desea editar (required)
     * @param profile Datos del perfil que se actualizarán (required)
     * @return Perfil actualizado con éxito (status code 200)
     *         or ID de usuario o perfil inválido proporcionado (status code 400)
     *         or Perfil no encontrado (status code 404)
     *         or Error de validación (datos incorrectos) (status code 422)
     */
    @Operation(
        operationId = "editProfile",
        summary = "Edita un perfil existente",
        description = "Permite al usuario editar un perfil existente utilizando el ID del usuario y el ID del perfil.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfil actualizado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Profile.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID de usuario o perfil inválido proporcionado"),
            @ApiResponse(responseCode = "404", description = "Perfil no encontrado"),
            @ApiResponse(responseCode = "422", description = "Error de validación (datos incorrectos)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/profiles/{profileID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Profile> editProfile(
        @Parameter(name = "userID", description = "ID del usuario del cual se desea editar el perfil", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "profileID", description = "ID del perfil que se desea editar", required = true, in = ParameterIn.PATH) @PathVariable("profileID") Integer profileID,
        @Parameter(name = "Profile", description = "Datos del perfil que se actualizarán", required = true) @Valid @RequestBody Profile profile
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"avatarURL\" : \"https://example.com/avatars/avatar1.png\", \"profileID\" : 2, \"name\" : \"Perfil Principal\", \"type\" : \"adult\", \"userID\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/list/{listID} : Obtiene los detalles de una lista específica
     * Recupera la información de la lista mediante su ID.
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a modificar (required)
     * @return Detalles de la lista recuperados con éxito (status code 200)
     *         or Lista no encontrada (status code 404)
     */
    @Operation(
        operationId = "getList",
        summary = "Obtiene los detalles de una lista específica",
        description = "Recupera la información de la lista mediante su ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles de la lista recuperados con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelList.class))
            }),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/list/{listID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelList> getList(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a modificar", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listID\" : 101, \"films\" : [ 1, 1 ], \"createdAt\" : \"2023-10-09T10:00:00Z\", \"series\" : [ 1, 1 ], \"name\" : \"Mis Series Favoritas\", \"userID\" : 101 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/payment : Obtiene el método de pago de un usuario
     * Devuelve el método de pago actual asociado a un usuario específico.
     *
     * @param userID ID del usuario del cual se obtendrá el método de pago (required)
     * @return Método de pago obtenido con éxito (status code 200)
     *         or Usuario o método de pago no encontrado (status code 404)
     *         or Solicitud inválida (datos incorrectos) (status code 400)
     */
    @Operation(
        operationId = "getPaymentMethod",
        summary = "Obtiene el método de pago de un usuario",
        description = "Devuelve el método de pago actual asociado a un usuario específico.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Método de pago obtenido con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentMethod.class))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario o método de pago no encontrado"),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incorrectos)")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/payment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PaymentMethod> getPaymentMethod(
        @Parameter(name = "userID", description = "ID del usuario del cual se obtendrá el método de pago", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cardHolderName\" : \"Juan Pérez\", \"paymentID\" : 12345, \"userID\" : 12345, \"cardNumber\" : 4111111111111111, \"expirationDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/profiles/{profileID} : Obtiene un perfil existente
     * Permite al usuario obtener un perfil específico utilizando el ID del usuario y el ID del perfil.
     *
     * @param userID ID del usuario del cual se desea obtener el perfil (required)
     * @param profileID ID del perfil que se desea obtener (required)
     * @return Perfil obtenido con éxito (status code 200)
     *         or Perfil no encontrado (status code 404)
     *         or ID de usuario o perfil inválido proporcionado (status code 400)
     */
    @Operation(
        operationId = "getProfileById",
        summary = "Obtiene un perfil existente",
        description = "Permite al usuario obtener un perfil específico utilizando el ID del usuario y el ID del perfil.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfil obtenido con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Profile.class))
            }),
            @ApiResponse(responseCode = "404", description = "Perfil no encontrado"),
            @ApiResponse(responseCode = "400", description = "ID de usuario o perfil inválido proporcionado")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/profiles/{profileID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Profile> getProfileById(
        @Parameter(name = "userID", description = "ID del usuario del cual se desea obtener el perfil", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "profileID", description = "ID del perfil que se desea obtener", required = true, in = ParameterIn.PATH) @PathVariable("profileID") Integer profileID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"avatarURL\" : \"https://example.com/avatars/avatar1.png\", \"profileID\" : 2, \"name\" : \"Perfil Principal\", \"type\" : \"adult\", \"userID\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/getSuscripcionPlan : Ver Plan de Suscripción Contratado
     * Obtiene la información del plan de suscripción actual contratado por el usuario.
     *
     * @param userID ID del usuario que desea consultar su plan de suscripción (required)
     * @return Plan de suscripción recuperado con éxito (status code 200)
     *         or Solicitud inválida (falta el ID del usuario) (status code 400)
     *         or No se encontró un plan de suscripción para el usuario (status code 404)
     *         or Error interno del servidor al procesar la solicitud (status code 500)
     */
    @Operation(
        operationId = "getSuscripcionPlan",
        summary = "Ver Plan de Suscripción Contratado",
        description = "Obtiene la información del plan de suscripción actual contratado por el usuario.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Plan de suscripción recuperado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuscripcionPlan.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (falta el ID del usuario)"),
            @ApiResponse(responseCode = "404", description = "No se encontró un plan de suscripción para el usuario"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor al procesar la solicitud")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/getSuscripcionPlan",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SuscripcionPlan> getSuscripcionPlan(
        @Parameter(name = "userID", description = "ID del usuario que desea consultar su plan de suscripción", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2024-12-31\", \"paymentID\" : 1, \"planID\" : 5, \"userID\" : 1, \"startDate\" : \"2024-01-01\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID} : Obtiene un usuario por su ID
     * Obtiene la información de un usuario específico registrado en la plataforma utilizando su ID.
     *
     * @param userID ID del usuario que se desea obtener (required)
     * @return Operación exitosa (status code 200)
     *         or ID de usuario inválido proporcionado (status code 400)
     *         or Usuario no encontrado (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Obtiene un usuario por su ID",
        description = "Obtiene la información de un usuario específico registrado en la plataforma utilizando su ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID de usuario inválido proporcionado"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getUserById(
        @Parameter(name = "userID", description = "ID del usuario que se desea obtener", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"password\" : \"1e34r\", \"preferences\" : [ 1, 3, 4 ], \"name\" : \"Juan Pérez\", \"userID\" : 1, \"email\" : \"juan.perez@example.com\", \"username\" : \"juanperez\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/lists : Obtiene todas las listas de un usuario
     * Recupera todas las listas que ha creado un usuario específico.
     *
     * @param userID ID del usuario cuyas listas se desean recuperar (required)
     * @return Listas recuperadas con éxito (status code 200)
     *         or Usuario no encontrado (status code 404)
     */
    @Operation(
        operationId = "getUserLists",
        summary = "Obtiene todas las listas de un usuario",
        description = "Recupera todas las listas que ha creado un usuario específico.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Listas recuperadas con éxito", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ModelList.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/lists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ModelList>> getUserLists(
        @Parameter(name = "userID", description = "ID del usuario cuyas listas se desean recuperar", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"listID\" : 101, \"films\" : [ 1, 1 ], \"createdAt\" : \"2023-10-09T10:00:00Z\", \"series\" : [ 1, 1 ], \"name\" : \"Mis Series Favoritas\", \"userID\" : 101 }, { \"listID\" : 101, \"films\" : [ 1, 1 ], \"createdAt\" : \"2023-10-09T10:00:00Z\", \"series\" : [ 1, 1 ], \"name\" : \"Mis Series Favoritas\", \"userID\" : 101 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{userID}/hireSuscripcionPlan : Contrata un Plan de Suscripción
     * Añade un plan de suscripción de la plataforma al usuario
     *
     * @param userID ID del usuario que desea consultar su plan de suscripción (required)
     * @param suscripcionPlan Datos del plan de suscripción a contratar (required)
     * @return Plan de suscripción contratado con éxito (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Conflicto (el plan de suscripción ya está contratado) (status code 409)
     */
    @Operation(
        operationId = "hireSuscripcionPlan",
        summary = "Contrata un Plan de Suscripción",
        description = "Añade un plan de suscripción de la plataforma al usuario",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Plan de suscripción contratado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuscripcionPlan.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "409", description = "Conflicto (el plan de suscripción ya está contratado)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/hireSuscripcionPlan",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SuscripcionPlan> hireSuscripcionPlan(
        @Parameter(name = "userID", description = "ID del usuario que desea consultar su plan de suscripción", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "SuscripcionPlan", description = "Datos del plan de suscripción a contratar", required = true) @Valid @RequestBody SuscripcionPlan suscripcionPlan
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2024-12-31\", \"paymentID\" : 1, \"planID\" : 5, \"userID\" : 1, \"startDate\" : \"2024-01-01\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/profiles : Lista todos los perfiles de un usuario
     * Devuelve una lista de todos los perfiles asociados a un usuario específico.
     *
     * @param userID ID del usuario del cual se listarán los perfiles (required)
     * @return Perfiles listados con éxito (status code 200)
     *         or Usuario no encontrado (status code 404)
     *         or Solicitud inválida (datos incorrectos) (status code 400)
     */
    @Operation(
        operationId = "listProfiles",
        summary = "Lista todos los perfiles de un usuario",
        description = "Devuelve una lista de todos los perfiles asociados a un usuario específico.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfiles listados con éxito", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Profile.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incorrectos)")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/profiles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Profile>> listProfiles(
        @Parameter(name = "userID", description = "ID del usuario del cual se listarán los perfiles", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2023-10-09T10:20:30Z\", \"avatarURL\" : \"https://example.com/avatars/avatar1.png\", \"profileID\" : 2, \"name\" : \"Perfil Principal\", \"type\" : \"adult\", \"userID\" : 2 }, { \"createdAt\" : \"2023-10-09T10:20:30Z\", \"avatarURL\" : \"https://example.com/avatars/avatar1.png\", \"profileID\" : 2, \"name\" : \"Perfil Principal\", \"type\" : \"adult\", \"userID\" : 2 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/login : Inicia sesión en el sistema
     * Permite al usuario iniciar sesión en el sistema con su nombre de usuario y contraseña.
     *
     * @param username El nombre de usuario para iniciar sesión (required)
     * @param password La contraseña para iniciar sesión en texto claro (required)
     * @return Sesión iniciada exitosamente (status code 200)
     *         or Nombre de usuario o contraseña inválido(a) proporcionado(a) (status code 400)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Inicia sesión en el sistema",
        description = "Permite al usuario iniciar sesión en el sistema con su nombre de usuario y contraseña.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sesión iniciada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nombre de usuario o contraseña inválido(a) proporcionado(a)")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/login",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> loginUser(
        @NotNull @Parameter(name = "username", description = "El nombre de usuario para iniciar sesión", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = true) String username,
        @NotNull @Parameter(name = "password", description = "La contraseña para iniciar sesión en texto claro", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"password\" : \"1e34r\", \"preferences\" : [ 1, 3, 4 ], \"name\" : \"Juan Pérez\", \"userID\" : 1, \"email\" : \"juan.perez@example.com\", \"username\" : \"juanperez\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/logout : Cierra la sesión del usuario actualmente conectado
     * Finaliza la sesión del usuario que está actualmente conectado en el sistema.
     *
     * @return Sesion cerrada exitosamente (status code 200)
     */
    @Operation(
        operationId = "logoutUser",
        summary = "Cierra la sesión del usuario actualmente conectado",
        description = "Finaliza la sesión del usuario que está actualmente conectado en el sistema.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sesion cerrada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LogoutUser200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/logout",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LogoutUser200Response> logoutUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Sesion cerrada exitosamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{userID} : Actualiza un usuario existente
     * Actualiza la información de un usuario existente en la plataforma por su ID.
     *
     * @param userID ID del usuario que se desea actualizar (required)
     * @param user Datos del usuario que se actualizarán (required)
     * @return Usuario actualizado con éxito (status code 200)
     *         or ID de usuario inválido proporcionado (status code 400)
     *         or Usuario no encontrado (status code 404)
     *         or Error de validación (status code 422)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Actualiza un usuario existente",
        description = "Actualiza la información de un usuario existente en la plataforma por su ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuario actualizado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID de usuario inválido proporcionado"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
            @ApiResponse(responseCode = "422", description = "Error de validación")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{userID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> updateUser(
        @Parameter(name = "userID", description = "ID del usuario que se desea actualizar", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "User", description = "Datos del usuario que se actualizarán", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-10-09T10:20:30Z\", \"password\" : \"1e34r\", \"preferences\" : [ 1, 3, 4 ], \"name\" : \"Juan Pérez\", \"userID\" : 1, \"email\" : \"juan.perez@example.com\", \"username\" : \"juanperez\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID}/list/{listID}/film/{filmID} : Elimina una pelicula de una lista
     * Permite elimnar una pelicula de una lista
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a la que se desea añadir contenido (required)
     * @param filmID ID de la pelicula (required)
     * @return Pelicula eliminada de la lista (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (no se puede añadir el contenido a la lista) (status code 409)
     */
    @Operation(
        operationId = "userUserIDListListIDFilmFilmIDDelete",
        summary = "Elimina una pelicula de una lista",
        description = "Permite elimnar una pelicula de una lista",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Pelicula eliminada de la lista"),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (no se puede añadir el contenido a la lista)")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}/list/{listID}/film/{filmID}"
    )
    
    default ResponseEntity<Void> userUserIDListListIDFilmFilmIDDelete(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a la que se desea añadir contenido", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID,
        @Parameter(name = "filmID", description = "ID de la pelicula", required = true, in = ParameterIn.PATH) @PathVariable("filmID") Integer filmID
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{userID}/list/{listID}/film/{filmID} : Añade pelicula a una lista existente
     * Permite agregar nuevas peliculas a una lista específica.
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a la que se desea añadir contenido (required)
     * @param filmID ID de la pelicula (required)
     * @return Contenido añadido a la lista con éxito (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (no se puede añadir el contenido a la lista) (status code 409)
     */
    @Operation(
        operationId = "userUserIDListListIDFilmFilmIDPost",
        summary = "Añade pelicula a una lista existente",
        description = "Permite agregar nuevas peliculas a una lista específica.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Contenido añadido a la lista con éxito"),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (no se puede añadir el contenido a la lista)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/list/{listID}/film/{filmID}"
    )
    
    default ResponseEntity<Void> userUserIDListListIDFilmFilmIDPost(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a la que se desea añadir contenido", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID,
        @Parameter(name = "filmID", description = "ID de la pelicula", required = true, in = ParameterIn.PATH) @PathVariable("filmID") Integer filmID
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/list/{listID}/films : Obtiene peliculas de una lista
     * Devuelve las peliculas de una lista
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a la que se desea añadir contenido (required)
     * @return Peliculas de lista devueltas (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (no se puede añadir el contenido a la lista) (status code 409)
     */
    @Operation(
        operationId = "userUserIDListListIDFilmsGet",
        summary = "Obtiene peliculas de una lista",
        description = "Devuelve las peliculas de una lista",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Peliculas de lista devueltas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FilmList.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (no se puede añadir el contenido a la lista)")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/list/{listID}/films",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FilmList>> userUserIDListListIDFilmsGet(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a la que se desea añadir contenido", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"filmID\" : 1, \"title\" : \"El Señor de los Anillos\" }, { \"filmID\" : 1, \"title\" : \"El Señor de los Anillos\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userID}/list/{listID}/serie/{serieID} : Elimina una serie de una lista
     * Permite eliminar una serie de una lista
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a la que se desea añadir contenido (required)
     * @param serieID ID de la serie (required)
     * @return Serie eliminada de la lista (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (no se puede añadir el contenido a la lista) (status code 409)
     */
    @Operation(
        operationId = "userUserIDListListIDSerieSerieIDDelete",
        summary = "Elimina una serie de una lista",
        description = "Permite eliminar una serie de una lista",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Serie eliminada de la lista"),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (no se puede añadir el contenido a la lista)")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userID}/list/{listID}/serie/{serieID}"
    )
    
    default ResponseEntity<Void> userUserIDListListIDSerieSerieIDDelete(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a la que se desea añadir contenido", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID,
        @Parameter(name = "serieID", description = "ID de la serie", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{userID}/list/{listID}/serie/{serieID} : Añade serie a una lista existente
     * Permite agregar nuevas series a una lista específica.
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a la que se desea añadir contenido (required)
     * @param serieID ID de la serie (required)
     * @return Contenido añadido a la lista con éxito (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (no se puede añadir el contenido a la lista) (status code 409)
     */
    @Operation(
        operationId = "userUserIDListListIDSerieSerieIDPost",
        summary = "Añade serie a una lista existente",
        description = "Permite agregar nuevas series a una lista específica.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Contenido añadido a la lista con éxito"),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (no se puede añadir el contenido a la lista)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{userID}/list/{listID}/serie/{serieID}"
    )
    
    default ResponseEntity<Void> userUserIDListListIDSerieSerieIDPost(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a la que se desea añadir contenido", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID,
        @Parameter(name = "serieID", description = "ID de la serie", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userID}/list/{listID}/series : Obtiene series de una lista
     * Devuelve las series de una lista
     *
     * @param userID ID del usuario que posee la lista (required)
     * @param listID ID de la lista a la que se desea añadir contenido (required)
     * @return Series de lista devueltas (status code 201)
     *         or Solicitud inválida (datos incompletos o incorrectos) (status code 400)
     *         or Lista no encontrada (status code 404)
     *         or Conflicto (no se puede añadir el contenido a la lista) (status code 409)
     */
    @Operation(
        operationId = "userUserIDListListIDSeriesGet",
        summary = "Obtiene series de una lista",
        description = "Devuelve las series de una lista",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Series de lista devueltas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SeriesList.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida (datos incompletos o incorrectos)"),
            @ApiResponse(responseCode = "404", description = "Lista no encontrada"),
            @ApiResponse(responseCode = "409", description = "Conflicto (no se puede añadir el contenido a la lista)")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userID}/list/{listID}/series",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<SeriesList>> userUserIDListListIDSeriesGet(
        @Parameter(name = "userID", description = "ID del usuario que posee la lista", required = true, in = ParameterIn.PATH) @PathVariable("userID") Integer userID,
        @Parameter(name = "listID", description = "ID de la lista a la que se desea añadir contenido", required = true, in = ParameterIn.PATH) @PathVariable("listID") Integer listID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"serieID\" : 1, \"title\" : \"El Señor de los Anillos\" }, { \"serieID\" : 1, \"title\" : \"El Señor de los Anillos\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
