/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-12T21:17:46.398497900+01:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "user", description = "Las operaciones relacionadas con el usuario son creación, actualización, eliminación, y autenticación.")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users : Obtiene todos los usuarios
     * Obtiene todos los usuarios registrados en la plataforma.
     *
     * @return Operación exitosa (status code 200)
     *         or Solicitud inválida (status code 400)
     *         or Usuarios no encontrados (status code 404)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Obtiene todos los usuarios",
        description = "Obtiene todos los usuarios registrados en la plataforma.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida"),
            @ApiResponse(responseCode = "404", description = "Usuarios no encontrados")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> getUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2023-10-09T10:20:30Z\", \"password\" : \"1e34r\", \"preferences\" : [ 1, 3, 4 ], \"name\" : \"Juan Pérez\", \"userID\" : 1, \"email\" : \"juan.perez@example.com\", \"username\" : \"juanperez\" }, { \"createdAt\" : \"2023-10-09T10:20:30Z\", \"password\" : \"1e34r\", \"preferences\" : [ 1, 3, 4 ], \"name\" : \"Juan Pérez\", \"userID\" : 1, \"email\" : \"juan.perez@example.com\", \"username\" : \"juanperez\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
