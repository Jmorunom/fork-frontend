/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Episode;
import org.openapitools.model.Serie;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-11T16:08:26.906146+01:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "series", description = "Este endpoint se encarga de la gestión de series en la plataforma, permitiendo a los administradores agregar nuevas series, actualizar información, eliminar series y listar las existentes con detalles como temporadas, título, y año de lanzamiento.")
public interface SeriesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /series/actor/{actorID} : Lista series por ID de actor
     * Devuelve una lista de series filtradas por el id del actor que participa en ellas
     *
     * @param actorID El ID del actor por el cual se filtrarán las series. (required)
     * @return Lista de series filtrada por actor obtenida con éxito (status code 200)
     *         or (NotFound) El recurso solicitado no existe en la base de datos. (status code 404)
     *         or (BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud. (status code 400)
     */
    @Operation(
        operationId = "seriesActorActorIDGet",
        summary = "Lista series por ID de actor",
        description = "Devuelve una lista de series filtradas por el id del actor que participa en ellas",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de series filtrada por actor obtenida con éxito", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Serie.class)))
            }),
            @ApiResponse(responseCode = "404", description = "(NotFound) El recurso solicitado no existe en la base de datos."),
            @ApiResponse(responseCode = "400", description = "(BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series/actor/{actorID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Serie>> seriesActorActorIDGet(
        @Parameter(name = "actorID", description = "El ID del actor por el cual se filtrarán las series.", required = true, in = ParameterIn.PATH) @PathVariable("actorID") Integer actorID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }, { \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /series/genre/{genreID} : Lista series por género
     * Devuelve una lista de series filtradas por el género especificado en el &#x60;genreID&#x60;.
     *
     * @param genreID El ID del género por el cual se filtrarán las series. (required)
     * @return Lista de series filtrada por género obtenida con éxito (status code 200)
     *         or (NotFound) El recurso solicitado no existe en la base de datos. (status code 404)
     *         or (BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud. (status code 400)
     */
    @Operation(
        operationId = "seriesGenreGenreIDGet",
        summary = "Lista series por género",
        description = "Devuelve una lista de series filtradas por el género especificado en el `genreID`.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de series filtrada por género obtenida con éxito", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Serie.class)))
            }),
            @ApiResponse(responseCode = "404", description = "(NotFound) El recurso solicitado no existe en la base de datos."),
            @ApiResponse(responseCode = "400", description = "(BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series/genre/{genreID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Serie>> seriesGenreGenreIDGet(
        @Parameter(name = "genreID", description = "El ID del género por el cual se filtrarán las series.", required = true, in = ParameterIn.PATH) @PathVariable("genreID") Integer genreID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }, { \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /series : Devuelve una lista de todas las series
     * Este endpoint permite obtener una lista de todas las series disponibles en la plataforma, con detalles como el título, número de temporadas, año de lanzamiento, y más. Es útil para que los usuarios naveguen por el catálogo de series o los administradores consulten la información existente.
     *
     * @return Lista de series obtenida con éxito (status code 200)
     */
    @Operation(
        operationId = "seriesGet",
        summary = "Devuelve una lista de todas las series",
        description = "Este endpoint permite obtener una lista de todas las series disponibles en la plataforma, con detalles como el título, número de temporadas, año de lanzamiento, y más. Es útil para que los usuarios naveguen por el catálogo de series o los administradores consulten la información existente.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de series obtenida con éxito", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Serie.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Serie>> seriesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }, { \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /series : Inserta una nueva serie
     * Este endpoint permite a los administradores agregar una nueva serie a la base de datos. La serie debe tener un título, número de temporadas y año de lanzamiento. Este recurso añade nuevos contenidos al catálogo.
     *
     * @param serie Objeto serie que será añadido (required)
     * @return Serie añadida con éxito (status code 201)
     *         or (BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud. (status code 400)
     */
    @Operation(
        operationId = "seriesPost",
        summary = "Inserta una nueva serie",
        description = "Este endpoint permite a los administradores agregar una nueva serie a la base de datos. La serie debe tener un título, número de temporadas y año de lanzamiento. Este recurso añade nuevos contenidos al catálogo.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Serie añadida con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Serie.class))
            }),
            @ApiResponse(responseCode = "400", description = "(BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/series",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Serie> seriesPost(
        @Parameter(name = "Serie", description = "Objeto serie que será añadido", required = true) @Valid @RequestBody Serie serie
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /series/{serieID} : Elimina una serie
     * Elimina una serie existente de la base de datos. El ID de la serie debe especificarse en la URL para su eliminación.
     *
     * @param serieID El ID de la serie a eliminar (required)
     * @return Serie eliminada con éxito (status code 204)
     *         or (NotFound) El recurso solicitado no existe en la base de datos. (status code 404)
     *         or (BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud. (status code 400)
     */
    @Operation(
        operationId = "seriesSerieIDDelete",
        summary = "Elimina una serie",
        description = "Elimina una serie existente de la base de datos. El ID de la serie debe especificarse en la URL para su eliminación.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Serie eliminada con éxito"),
            @ApiResponse(responseCode = "404", description = "(NotFound) El recurso solicitado no existe en la base de datos."),
            @ApiResponse(responseCode = "400", description = "(BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/series/{serieID}"
    )
    
    default ResponseEntity<Void> seriesSerieIDDelete(
        @Parameter(name = "serieID", description = "El ID de la serie a eliminar", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /series/{serieID}/episodes/{episodeID} : Eliminar un episodio
     * Elimina un episodio específico de una serie utilizando su ID.
     *
     * @param serieID ID de la serie. (required)
     * @param episodeID ID del episodio. (required)
     * @return Episodio eliminado con éxito. (status code 200)
     *         or Episodio no encontrado. (status code 404)
     *         or Error del servidor. (status code 500)
     */
    @Operation(
        operationId = "seriesSerieIDEpisodesEpisodeIDDelete",
        summary = "Eliminar un episodio",
        description = "Elimina un episodio específico de una serie utilizando su ID.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Episodio eliminado con éxito."),
            @ApiResponse(responseCode = "404", description = "Episodio no encontrado."),
            @ApiResponse(responseCode = "500", description = "Error del servidor.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/series/{serieID}/episodes/{episodeID}"
    )
    
    default ResponseEntity<Void> seriesSerieIDEpisodesEpisodeIDDelete(
        @Parameter(name = "serieID", description = "ID de la serie.", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID,
        @Parameter(name = "episodeID", description = "ID del episodio.", required = true, in = ParameterIn.PATH) @PathVariable("episodeID") Integer episodeID
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /series/{serieID}/episodes/{episodeID} : Obtener un episodio específico
     * Devuelve los detalles de un episodio de una serie específica utilizando el ID del episodio.
     *
     * @param serieID ID de la serie. (required)
     * @param episodeID ID del episodio. (required)
     * @return Episodio encontrado con éxito. (status code 200)
     *         or Episodio no encontrado. (status code 404)
     *         or Error del servidor. (status code 500)
     */
    @Operation(
        operationId = "seriesSerieIDEpisodesEpisodeIDGet",
        summary = "Obtener un episodio específico",
        description = "Devuelve los detalles de un episodio de una serie específica utilizando el ID del episodio.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Episodio encontrado con éxito.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Episode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Episodio no encontrado."),
            @ApiResponse(responseCode = "500", description = "Error del servidor.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series/{serieID}/episodes/{episodeID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Episode> seriesSerieIDEpisodesEpisodeIDGet(
        @Parameter(name = "serieID", description = "ID de la serie.", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID,
        @Parameter(name = "episodeID", description = "ID del episodio.", required = true, in = ParameterIn.PATH) @PathVariable("episodeID") Integer episodeID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoURL\" : \"https://example.com/photo.jpg\", \"numTemporada\" : 2, \"titulo\" : \"Episode Title\", \"serieID\" : 101, \"episodeID\" : 1, \"numEpisodio\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /series/{serieID}/episodes/{episodeID} : Editar un episodio
     * Modifica los detalles de un episodio específico de una serie.
     *
     * @param serieID ID de la serie. (required)
     * @param episodeID ID del episodio. (required)
     * @param episode Datos actualizados del episodio. (required)
     * @return Episodio actualizado con éxito. (status code 200)
     *         or Episodio no encontrado. (status code 404)
     *         or Error del servidor. (status code 500)
     */
    @Operation(
        operationId = "seriesSerieIDEpisodesEpisodeIDPut",
        summary = "Editar un episodio",
        description = "Modifica los detalles de un episodio específico de una serie.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Episodio actualizado con éxito."),
            @ApiResponse(responseCode = "404", description = "Episodio no encontrado."),
            @ApiResponse(responseCode = "500", description = "Error del servidor.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/series/{serieID}/episodes/{episodeID}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> seriesSerieIDEpisodesEpisodeIDPut(
        @Parameter(name = "serieID", description = "ID de la serie.", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID,
        @Parameter(name = "episodeID", description = "ID del episodio.", required = true, in = ParameterIn.PATH) @PathVariable("episodeID") Integer episodeID,
        @Parameter(name = "Episode", description = "Datos actualizados del episodio.", required = true) @Valid @RequestBody Episode episode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /series/{serieID}/episodes : Listar todos los episodios de una serie
     * Obtiene todos los episodios correspondientes a una serie específica.
     *
     * @param serieID ID de la serie cuyos episodios se desean obtener. (required)
     * @return Lista de episodios obtenida con éxito. (status code 200)
     *         or Serie no encontrada. (status code 404)
     *         or Error del servidor. (status code 500)
     */
    @Operation(
        operationId = "seriesSerieIDEpisodesGet",
        summary = "Listar todos los episodios de una serie",
        description = "Obtiene todos los episodios correspondientes a una serie específica.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de episodios obtenida con éxito.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Episode.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Serie no encontrada."),
            @ApiResponse(responseCode = "500", description = "Error del servidor.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series/{serieID}/episodes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Episode>> seriesSerieIDEpisodesGet(
        @Parameter(name = "serieID", description = "ID de la serie cuyos episodios se desean obtener.", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"photoURL\" : \"https://example.com/photo.jpg\", \"numTemporada\" : 2, \"titulo\" : \"Episode Title\", \"serieID\" : 101, \"episodeID\" : 1, \"numEpisodio\" : 1 }, { \"photoURL\" : \"https://example.com/photo.jpg\", \"numTemporada\" : 2, \"titulo\" : \"Episode Title\", \"serieID\" : 101, \"episodeID\" : 1, \"numEpisodio\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /series/{serieID}/episodes : Añadir un nuevo episodio a una serie
     * Crea un nuevo episodio en una serie específica.
     *
     * @param serieID ID de la serie a la que se añadirá el episodio. (required)
     * @param episode Detalles del nuevo episodio a crear. (required)
     * @return Episodio creado con éxito. (status code 201)
     *         or Solicitud incorrecta. (status code 400)
     *         or Serie no encontrada. (status code 404)
     *         or Error del servidor. (status code 500)
     */
    @Operation(
        operationId = "seriesSerieIDEpisodesPost",
        summary = "Añadir un nuevo episodio a una serie",
        description = "Crea un nuevo episodio en una serie específica.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Episodio creado con éxito."),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta."),
            @ApiResponse(responseCode = "404", description = "Serie no encontrada."),
            @ApiResponse(responseCode = "500", description = "Error del servidor.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/series/{serieID}/episodes",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> seriesSerieIDEpisodesPost(
        @Parameter(name = "serieID", description = "ID de la serie a la que se añadirá el episodio.", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID,
        @Parameter(name = "Episode", description = "Detalles del nuevo episodio a crear.", required = true) @Valid @RequestBody Episode episode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /series/{serieID} : Devuelve los detalles de una serie específica
     * Obtiene los detalles de una serie específica utilizando su ID. Permite consultar detalles como el título, número de temporadas, sinopsis y año de lanzamiento.
     *
     * @param serieID El ID de la serie a obtener (required)
     * @return Serie obtenida con éxito (status code 200)
     *         or (NotFound) El recurso solicitado no existe en la base de datos. (status code 404)
     */
    @Operation(
        operationId = "seriesSerieIDGet",
        summary = "Devuelve los detalles de una serie específica",
        description = "Obtiene los detalles de una serie específica utilizando su ID. Permite consultar detalles como el título, número de temporadas, sinopsis y año de lanzamiento.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Serie obtenida con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Serie.class))
            }),
            @ApiResponse(responseCode = "404", description = "(NotFound) El recurso solicitado no existe en la base de datos.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series/{serieID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Serie> seriesSerieIDGet(
        @Parameter(name = "serieID", description = "El ID de la serie a obtener", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /series/{serieID} : Actualiza una serie
     * Actualiza la información de una serie existente, proporcionando un ID en la URL. Los detalles actualizables incluyen el título, número de temporadas o año de lanzamiento.
     *
     * @param serieID El ID de la serie a actualizar (required)
     * @param serie Objeto serie con nuevos valores (required)
     * @return Serie actualizada con éxito (status code 200)
     *         or (NotFound) El recurso solicitado no existe en la base de datos. (status code 404)
     *         or (BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud. (status code 400)
     */
    @Operation(
        operationId = "seriesSerieIDPut",
        summary = "Actualiza una serie",
        description = "Actualiza la información de una serie existente, proporcionando un ID en la URL. Los detalles actualizables incluyen el título, número de temporadas o año de lanzamiento.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Serie actualizada con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Serie.class))
            }),
            @ApiResponse(responseCode = "404", description = "(NotFound) El recurso solicitado no existe en la base de datos."),
            @ApiResponse(responseCode = "400", description = "(BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/series/{serieID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Serie> seriesSerieIDPut(
        @Parameter(name = "serieID", description = "El ID de la serie a actualizar", required = true, in = ParameterIn.PATH) @PathVariable("serieID") Integer serieID,
        @Parameter(name = "Serie", description = "Objeto serie con nuevos valores", required = true) @Valid @RequestBody Serie serie
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /series/title/{title} : Busca una serie por título
     * Devuelve la información de una serie basada en el título especificado.
     *
     * @param title El título de la serie que se desea buscar. (required)
     * @return Serie encontrada con éxito (status code 200)
     *         or (NotFound) El recurso solicitado no existe en la base de datos. (status code 404)
     *         or (BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud. (status code 400)
     */
    @Operation(
        operationId = "seriesTitleTitleGet",
        summary = "Busca una serie por título",
        description = "Devuelve la información de una serie basada en el título especificado.",
        tags = { "series" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Serie encontrada con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Serie.class))
            }),
            @ApiResponse(responseCode = "404", description = "(NotFound) El recurso solicitado no existe en la base de datos."),
            @ApiResponse(responseCode = "400", description = "(BadRequest) Los datos enviados no son correctos o faltan datos obligatorios en la solicitud.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/series/title/{title}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Serie> seriesTitleTitleGet(
        @Parameter(name = "title", description = "El título de la serie que se desea buscar.", required = true, in = ParameterIn.PATH) @PathVariable("title") String title
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"genreID\" : 1, \"photoURL\" : \"photoURL\", \"seasons\" : 5, \"description\" : \"Series Sinopsis\", \"arrayActors\" : [ 101, 102, 103 ], \"serieID\" : 1, \"title\" : \"Series Title\", \"releaseYear\" : 2022 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
