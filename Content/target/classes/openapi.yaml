openapi: 3.0.0
info:
  description: "Esta API REST se encarga de manejar la información de la base de datos\
    \ del microservicio de Contenidos del servicio de Netflix. Proporciona varios\
    \ endpoints para gestionar películas, series y actores, permitiendo realizar operaciones\
    \ CRUD (Crear, Leer, Actualizar, Eliminar) sobre los recursos relacionados. Esta\
    \ API facilita la interacción entre el frontend y el backend del sistema, asegurando\
    \ que los datos sobre el catálogo de contenido estén siempre actualizados y accesibles\
    \ para los usuarios y administradores del servicio."
  title: API de Contenido
  version: "1.0"
servers:
- url: https://api.server/v1/content/
tags:
- description: "Este endpoint maneja toda la información relacionada con las pelí\
    culas, incluyendo su creación, modificación, eliminación, y consulta de detalles\
    \ como título, género, duración, y año de lanzamiento."
  name: films
- description: "Este endpoint se encarga de la gestión de series en la plataforma,\
    \ permitiendo a los administradores agregar nuevas series, actualizar informació\
    n, eliminar series y listar las existentes con detalles como temporadas, título,\
    \ y año de lanzamiento."
  name: series
- description: "Este endpoint maneja la información de los actores, permitiendo la\
    \ gestión de su perfil, incluyendo nombre, fecha de nacimiento, y fotografías."
  name: actors
paths:
  /films:
    get:
      description: "Este endpoint permite obtener una lista completa de todas las\
        \ películas en la base de datos, con su información como título, año de lanzamiento,\
        \ duración, y más. Se puede usar para mostrar el catálogo en la interfaz de\
        \ usuario o realizar análisis sobre el contenido."
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/film'
                type: array
          description: Lista de películas obtenida con éxito
      summary: Devuelve una lista de todas las películas
      tags:
      - films
      x-accepts:
      - application/json
      x-tags:
      - tag: films
    post:
      description: "Inserta una nueva película en la base de datos. La película debe\
        \ contener al menos su título, género, año de lanzamiento y duración. Este\
        \ endpoint es utilizado por administradores para añadir nuevos contenidos\
        \ al catálogo."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/film'
        description: Objeto película que será añadido
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
          description: Película añadida con éxito
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Inserta una nueva película
      tags:
      - films
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: films
  /films/{filmID}:
    delete:
      description: Este endpoint elimina una película existente de la base de datos.
        El ID de la película debe ser especificado en la URL.
      parameters:
      - description: El ID de la película a eliminar
        explode: false
        in: path
        name: filmID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Película eliminada con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Elimina una película
      tags:
      - films
      x-accepts:
      - application/json
      x-tags:
      - tag: films
    get:
      description: "Obtiene los detalles de una película específica utilizando su\
        \ ID. Este endpoint permite consultar información detallada sobre una pelí\
        cula, como su título, año de lanzamiento, duración, género y sinopsis."
      parameters:
      - description: El ID de la película a obtener
        explode: false
        in: path
        name: filmID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
          description: Película obtenida con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
      summary: Devuelve los detalles de una película específica
      tags:
      - films
      x-accepts:
      - application/json
      x-tags:
      - tag: films
    put:
      description: "Actualiza la información de una película existente. Se debe proporcionar\
        \ el ID de la película en la URL y los nuevos valores en el cuerpo de la solicitud.\
        \ Permite actualizar detalles como el título, género o sinopsis."
      parameters:
      - description: El ID de la película a actualizar
        explode: false
        in: path
        name: filmID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/film'
        description: Objeto película con los nuevos valores
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
          description: Película actualizada con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Actualiza una película
      tags:
      - films
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: films
  /films/genre/{genreID}:
    get:
      description: Devuelve una lista de películas filtradas por el género especificado
        en el `genreID`.
      parameters:
      - description: El ID del género por el cual se filtrarán las películas.
        explode: false
        in: path
        name: genreID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/film'
                type: array
          description: Lista de películas filtrada por género obtenida con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Lista películas por género
      tags:
      - films
      x-accepts:
      - application/json
      x-tags:
      - tag: films
  /films/title/{title}:
    get:
      description: Devuelve la información de una película basada en el título especificado.
      parameters:
      - description: El título de la película que se desea buscar.
        explode: false
        in: path
        name: title
        required: true
        schema:
          example: Film Title
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
          description: Película encontrada con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Busca una película por título
      tags:
      - films
      x-accepts:
      - application/json
      x-tags:
      - tag: films
  /films/actor/{actorID}:
    get:
      description: Devuelve una lista de películas filtradas por el id del actor que
        participa en ellas
      parameters:
      - description: El ID del actor por el cual se filtrarán las películas.
        explode: false
        in: path
        name: actorID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/film'
                type: array
          description: Lista de películas filtrada por actor obtenida con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Lista películas por ID de actor
      tags:
      - films
      x-accepts:
      - application/json
      x-tags:
      - tag: films
  /series:
    get:
      description: "Este endpoint permite obtener una lista de todas las series disponibles\
        \ en la plataforma, con detalles como el título, número de temporadas, añ\
        o de lanzamiento, y más. Es útil para que los usuarios naveguen por el catá\
        logo de series o los administradores consulten la información existente."
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/serie'
                type: array
          description: Lista de series obtenida con éxito
      summary: Devuelve una lista de todas las series
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
    post:
      description: "Este endpoint permite a los administradores agregar una nueva\
        \ serie a la base de datos. La serie debe tener un título, número de temporadas\
        \ y año de lanzamiento. Este recurso añade nuevos contenidos al catálogo."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serie'
        description: Objeto serie que será añadido
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serie'
          description: Serie añadida con éxito
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Inserta una nueva serie
      tags:
      - series
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /series/{serieID}:
    delete:
      description: Elimina una serie existente de la base de datos. El ID de la serie
        debe especificarse en la URL para su eliminación.
      parameters:
      - description: El ID de la serie a eliminar
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Serie eliminada con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Elimina una serie
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
    get:
      description: "Obtiene los detalles de una serie específica utilizando su ID.\
        \ Permite consultar detalles como el título, número de temporadas, sinopsis\
        \ y año de lanzamiento."
      parameters:
      - description: El ID de la serie a obtener
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serie'
          description: Serie obtenida con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
      summary: Devuelve los detalles de una serie específica
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
    put:
      description: "Actualiza la información de una serie existente, proporcionando\
        \ un ID en la URL. Los detalles actualizables incluyen el título, número de\
        \ temporadas o año de lanzamiento."
      parameters:
      - description: El ID de la serie a actualizar
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serie'
        description: Objeto serie con nuevos valores
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serie'
          description: Serie actualizada con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Actualiza una serie
      tags:
      - series
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /series/genre/{genreID}:
    get:
      description: Devuelve una lista de series filtradas por el género especificado
        en el `genreID`.
      parameters:
      - description: El ID del género por el cual se filtrarán las series.
        explode: false
        in: path
        name: genreID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/serie'
                type: array
          description: Lista de series filtrada por género obtenida con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Lista series por género
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /series/title/{title}:
    get:
      description: Devuelve la información de una serie basada en el título especificado.
      parameters:
      - description: El título de la serie que se desea buscar.
        explode: false
        in: path
        name: title
        required: true
        schema:
          example: Series Title
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serie'
          description: Serie encontrada con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Busca una serie por título
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /series/actor/{actorID}:
    get:
      description: Devuelve una lista de series filtradas por el id del actor que
        participa en ellas
      parameters:
      - description: El ID del actor por el cual se filtrarán las series.
        explode: false
        in: path
        name: actorID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/serie'
                type: array
          description: Lista de series filtrada por actor obtenida con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Lista series por ID de actor
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /series/{serieID}/episodes:
    get:
      description: Obtiene todos los episodios correspondientes a una serie específica.
      parameters:
      - description: ID de la serie cuyos episodios se desean obtener.
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/episode'
                type: array
          description: Lista de episodios obtenida con éxito.
        "404":
          description: Serie no encontrada.
        "500":
          description: Error del servidor.
      summary: Listar todos los episodios de una serie
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
    post:
      description: Crea un nuevo episodio en una serie específica.
      parameters:
      - description: ID de la serie a la que se añadirá el episodio.
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/episode'
        description: Detalles del nuevo episodio a crear.
        required: true
      responses:
        "201":
          description: Episodio creado con éxito.
        "400":
          description: Solicitud incorrecta.
        "404":
          description: Serie no encontrada.
        "500":
          description: Error del servidor.
      summary: Añadir un nuevo episodio a una serie
      tags:
      - series
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /series/{serieID}/episodes/{episodeID}:
    delete:
      description: Elimina un episodio específico de una serie utilizando su ID.
      parameters:
      - description: ID de la serie.
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          type: integer
        style: simple
      - description: ID del episodio.
        explode: false
        in: path
        name: episodeID
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Episodio eliminado con éxito.
        "404":
          description: Episodio no encontrado.
        "500":
          description: Error del servidor.
      summary: Eliminar un episodio
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
    get:
      description: Devuelve los detalles de un episodio de una serie específica utilizando
        el ID del episodio.
      parameters:
      - description: ID de la serie.
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          type: integer
        style: simple
      - description: ID del episodio.
        explode: false
        in: path
        name: episodeID
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/episode'
          description: Episodio encontrado con éxito.
        "404":
          description: Episodio no encontrado.
        "500":
          description: Error del servidor.
      summary: Obtener un episodio específico
      tags:
      - series
      x-accepts:
      - application/json
      x-tags:
      - tag: series
    put:
      description: Modifica los detalles de un episodio específico de una serie.
      parameters:
      - description: ID de la serie.
        explode: false
        in: path
        name: serieID
        required: true
        schema:
          type: integer
        style: simple
      - description: ID del episodio.
        explode: false
        in: path
        name: episodeID
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/episode'
        description: Datos actualizados del episodio.
        required: true
      responses:
        "200":
          description: Episodio actualizado con éxito.
        "404":
          description: Episodio no encontrado.
        "500":
          description: Error del servidor.
      summary: Editar un episodio
      tags:
      - series
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: series
  /actors:
    get:
      description: "Devuelve una lista completa de actores registrados en la base\
        \ de datos con detalles como su nombre, fecha de nacimiento, y fotografías\
        \ asociadas. Es útil para gestionar los perfiles de actores en la plataforma."
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/actor'
                type: array
          description: Lista de actores obtenida con éxito
      summary: Devuelve una lista de actores
      tags:
      - actors
      x-accepts:
      - application/json
      x-tags:
      - tag: actors
    post:
      description: "Permite agregar un nuevo actor a la base de datos, proporcionando\
        \ su nombre y fecha de nacimiento como información obligatoria. Este endpoint\
        \ es utilizado principalmente por los administradores."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actor'
        description: Objeto actor que será añadido
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actor'
          description: Actor añadido con éxito
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Inserta un nuevo actor
      tags:
      - actors
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: actors
  /actors/{actorID}:
    delete:
      description: Elimina un actor de la base de datos. El ID del actor debe proporcionarse
        en la URL para identificar al actor que será eliminado.
      parameters:
      - description: El ID del actor a eliminar
        explode: false
        in: path
        name: actorID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Actor eliminado con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Elimina un actor
      tags:
      - actors
      x-accepts:
      - application/json
      x-tags:
      - tag: actors
    get:
      description: "Devuelve los detalles de un actor específico a partir de su ID,\
        \ como su nombre, fecha de nacimiento y las imágenes asociadas."
      parameters:
      - description: El ID del actor a obtener
        explode: false
        in: path
        name: actorID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actor'
          description: Actor obtenido con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
      summary: Devuelve los detalles de un actor específico
      tags:
      - actors
      x-accepts:
      - application/json
      x-tags:
      - tag: actors
    put:
      description: "Actualiza los detalles de un actor existente. Este endpoint permite\
        \ modificar la información de un actor, incluyendo su nombre o fecha de nacimiento."
      parameters:
      - description: El ID del actor a actualizar
        explode: false
        in: path
        name: actorID
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actor'
        description: Objeto actor con nuevos valores
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actor'
          description: Actor actualizado con éxito
        "404":
          description: (NotFound) El recurso solicitado no existe en la base de datos.
        "400":
          description: (BadRequest) Los datos enviados no son correctos o faltan datos
            obligatorios en la solicitud.
      summary: Actualiza un actor
      tags:
      - actors
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: actors
components:
  responses:
    badRequest:
      description: (BadRequest) Los datos enviados no son correctos o faltan datos
        obligatorios en la solicitud.
    notFound:
      description: (NotFound) El recurso solicitado no existe en la base de datos.
  schemas:
    film:
      example:
        genreID: 1
        duration: 120
        photoURL: photoURL
        filmID: 1
        description: Film Sinopsis
        arrayActors:
        - 101
        - 102
        - 103
        title: Film Title
        releaseYear: 2023
      properties:
        filmID:
          example: 1
          type: integer
        title:
          example: Film Title
          type: string
        genreID:
          example: 1
          type: integer
        releaseYear:
          example: 2023
          type: integer
        duration:
          example: 120
          type: integer
        description:
          example: Film Sinopsis
          type: string
        photoURL:
          description: Imagen descriptiva
          type: string
        arrayActors:
          example:
          - 101
          - 102
          - 103
          items:
            type: integer
          type: array
      required:
      - arrayActors
      - description
      - duration
      - filmID
      - genreID
      - photoURL
      - releaseYear
      - title
      type: object
    serie:
      example:
        genreID: 1
        photoURL: photoURL
        seasons: 5
        description: Series Sinopsis
        arrayActors:
        - 101
        - 102
        - 103
        serieID: 1
        title: Series Title
        releaseYear: 2022
      properties:
        serieID:
          example: 1
          type: integer
        title:
          example: Series Title
          type: string
        seasons:
          example: 5
          type: integer
        releaseYear:
          example: 2022
          type: integer
        genreID:
          example: 1
          type: integer
        description:
          example: Series Sinopsis
          type: string
        photoURL:
          description: Imagen descriptiva
          type: string
        arrayActors:
          example:
          - 101
          - 102
          - 103
          items:
            type: integer
          type: array
      required:
      - arrayActors
      - description
      - genreID
      - photoURL
      - seasons
      - serieID
      - title
      type: object
    actor:
      example:
        photoURL: photoURL
        actorID: 1
        birthdayDate: 2000-01-23T04:56:07.000+00:00
        name: Actor Name
      properties:
        actorID:
          example: 1
          type: integer
        name:
          example: Actor Name
          type: string
        birthdayDate:
          format: date-time
          type: string
        photoURL:
          description: Imagen descriptiva
          type: string
      required:
      - actorID
      - birthdayDate
      - name
      - photoURL
      type: object
    episode:
      example:
        photoURL: https://example.com/photo.jpg
        numTemporada: 2
        titulo: Episode Title
        serieID: 101
        episodeID: 1
        numEpisodio: 1
      properties:
        episodeID:
          example: 1
          type: integer
        serieID:
          example: 101
          type: integer
        numEpisodio:
          example: 1
          type: integer
        numTemporada:
          example: 2
          type: integer
        titulo:
          example: Episode Title
          type: string
        photoURL:
          example: https://example.com/photo.jpg
          type: string
      required:
      - episodeID
      - numEpisodio
      - numTemporada
      - photoURL
      - serieID
      - titulo
      type: object
